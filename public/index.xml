<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>동시성과 병렬성의 차이</title>
    <link>https://quartz.jzhao.xyz/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4</link>
    <guid>https://quartz.jzhao.xyz/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4</guid>
    <description>동시성(Concurrency)과 병렬성(Parallelism)은 현대 소프트웨어 개발에서 중요한 개념이지만, 종종 혼동되어 사용됩니다. 이 두 개념은 여러 작업을 동시에 처리하는 방식에 관한 것이지만, 실제 구현 방식과 목적에서 중요한 차이가 있습니다. 동시성(Concurrency) 동시성은 여러 작업을 논리적으로 동시에 실행하는 것처럼 보이게 하는 개념입니다.</description>
    <pubDate>Thu, 20 Mar 2025 00:43:51 GMT</pubDate>
  </item><item>
    <title>프로세스 메모리 구조</title>
    <link>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0</link>
    <guid>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0</guid>
    <description>프로세스 메모리 구조는 운영체제가 각 프로세스에 할당하는 가상 메모리 공간의 논리적 구조입니다. 이 구조는 프로그램이 실행되는 동안 코드와 데이터를 효율적으로 관리하고 접근할 수 있도록 설계되어 있습니다. 프로세스 메모리 구조를 이해하는 것은 메모리 관리와 프로그램 최적화에 필수적인 지식입니다.</description>
    <pubDate>Thu, 20 Mar 2025 00:22:17 GMT</pubDate>
  </item><item>
    <title>IPC(Inter-Process Communication)</title>
    <link>https://quartz.jzhao.xyz/IPC(Inter-Process-Communication)</link>
    <guid>https://quartz.jzhao.xyz/IPC(Inter-Process-Communication)</guid>
    <description>프로세스 간 통신(Inter-Process Communication, IPC)은 서로 다른 프로세스가 데이터를 공유하고 서로 통신할 수 있게 해주는 메커니즘입니다. 현대 컴퓨팅 환경에서는 대부분의 복잡한 시스템이 여러 프로세스로 구성되어 있어, 이들 간의 효율적인 통신이 성능과 기능성에 직접적인 영향을 미칩니다.</description>
    <pubDate>Thu, 20 Mar 2025 00:19:08 GMT</pubDate>
  </item><item>
    <title>프로세스와 스레드의 차이</title>
    <link>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4</link>
    <guid>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4</guid>
    <description>...</description>
    <pubDate>Thu, 20 Mar 2025 00:18:35 GMT</pubDate>
  </item><item>
    <title>프로세스(Process)</title>
    <link>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4(Process)</link>
    <guid>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4(Process)</guid>
    <description>프로세스는 컴퓨터 시스템에서 실행 중인 프로그램의 인스턴스를 의미합니다. 운영체제는 이러한 프로세스들을 관리하고, 각 프로세스에 필요한 자원을 할당하며, 프로세스 간의 상호작용을 조정합니다. 프로세스는 현대 컴퓨팅 환경의 핵심 개념으로, 다중 작업 처리와 시스템 자원의 효율적 활용을 가능하게 합니다.</description>
    <pubDate>Thu, 20 Mar 2025 00:18:06 GMT</pubDate>
  </item><item>
    <title>스레드(Thread)</title>
    <link>https://quartz.jzhao.xyz/%EC%8A%A4%EB%A0%88%EB%93%9C(Thread)</link>
    <guid>https://quartz.jzhao.xyz/%EC%8A%A4%EB%A0%88%EB%93%9C(Thread)</guid>
    <description>스레드(Thread)는 프로세스 내에서 실행되는 작업의 가장 작은 단위입니다. 하나의 프로세스는 여러 개의 스레드를 가질 수 있으며, 각 스레드는 동일한 프로세스 내의 자원을 공유하면서 독립적으로 실행됩니다. 이것이 바로 스레드가 ‘경량 프로세스’라고 불리는 이유입니다. 스레드는 현대 소프트웨어 개발에서 매우 중요한 개념으로, 멀티스레딩 기법을 통해 애플리케이션의 성능과 응답성을 크게 향상시킬 수 있습니다.</description>
    <pubDate>Thu, 20 Mar 2025 00:14:05 GMT</pubDate>
  </item><item>
    <title>동시성(Concurrency)</title>
    <link>https://quartz.jzhao.xyz/%EB%8F%99%EC%8B%9C%EC%84%B1(Concurrency)</link>
    <guid>https://quartz.jzhao.xyz/%EB%8F%99%EC%8B%9C%EC%84%B1(Concurrency)</guid>
    <description>소프트웨어 개발에서 동시성(Concurrency)의 개념과 구현 방법, 그리고 관련 패턴에 대한 포괄적인 설명.</description>
    <pubDate>Thu, 20 Mar 2025 00:00:02 GMT</pubDate>
  </item><item>
    <title>SW 개발 사이클</title>
    <link>https://quartz.jzhao.xyz/SW-%EA%B0%9C%EB%B0%9C-%EC%82%AC%EC%9D%B4%ED%81%B4</link>
    <guid>https://quartz.jzhao.xyz/SW-%EA%B0%9C%EB%B0%9C-%EC%82%AC%EC%9D%B4%ED%81%B4</guid>
    <description>기능 추가 기획에서 신규 기능을 정의 신규 기능을 개발에 전달 개발에서 기능을 검토 기능 요구사항과 관련된 현황 정보를 수집 기능 요구사항에 아래 요소가 있는지 검토하고 없으면 부족한 점을 기획에 다시 전달 기능이 기존 정책을 어기는 등 물리적으로 구현이 불가능한지 검토 기능이 필요한 이유가 포함되어 있는지 검토(정확한 문제를 진단하기 위함) 문제를 해결하는데 ...</description>
    <pubDate>Wed, 19 Mar 2025 07:44:39 GMT</pubDate>
  </item><item>
    <title>OpenAI Responses</title>
    <link>https://quartz.jzhao.xyz/OpenAI-Responses</link>
    <guid>https://quartz.jzhao.xyz/OpenAI-Responses</guid>
    <description></description>
    <pubDate>Wed, 19 Mar 2025 04:00:19 GMT</pubDate>
  </item><item>
    <title>패키지의 한계와 문제점</title>
    <link>https://quartz.jzhao.xyz/%ED%8C%A8%ED%82%A4%EC%A7%80%EC%9D%98-%ED%95%9C%EA%B3%84%EC%99%80-%EB%AC%B8%EC%A0%9C%EC%A0%90</link>
    <guid>https://quartz.jzhao.xyz/%ED%8C%A8%ED%82%A4%EC%A7%80%EC%9D%98-%ED%95%9C%EA%B3%84%EC%99%80-%EB%AC%B8%EC%A0%9C%EC%A0%90</guid>
    <description>패키지의 한계와 문제점 자바에서 패키지는 클래스와 인터페이스를 논리적인 그룹으로 묶어주는 역할을 합니다. 이를 통해 네임스페이스를 관리하고, 클래스 간의 충돌을 방지하며, 코드의 조직화를 돕습니다. 하지만 패키지만으로는 다음과 같은 한계가 있습니다. 1. 캡슐화의 제한 공개 범위의 한계: public으로 선언된 클래스나 인터페이스는 모든 패키지에서 접근 가능합니다.</description>
    <pubDate>Mon, 17 Mar 2025 09:08:52 GMT</pubDate>
  </item>
    </channel>
  </rss>