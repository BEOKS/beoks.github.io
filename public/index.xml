<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>JPA Criteria API</title>
    <link>https://quartz.jzhao.xyz/JPA-Criteria-API</link>
    <guid>https://quartz.jzhao.xyz/JPA-Criteria-API</guid>
    <description>JPA(Java Persistence API)는 자바 애플리케이션에서 관계형 데이터를 관리하기 위한 표준 기술입니다. 그 중에서도 Criteria API는 타입 안전한(type-safe) 방식으로 쿼리를 구성할 수 있게 해주는 강력한 도구입니다. 이 글에서는 JPA Criteria API의 개념부터 실전 활용법까지 자세히 알아보겠습니다.</description>
    <pubDate>Mon, 10 Mar 2025 06:52:32 GMT</pubDate>
  </item><item>
    <title>JPA Specification</title>
    <link>https://quartz.jzhao.xyz/JPA-Specification</link>
    <guid>https://quartz.jzhao.xyz/JPA-Specification</guid>
    <description>Spring Data JPA에서 복잡한 동적 쿼리를 우아하게 처리할 수 있는 Specification 패턴에 대해 자세히 알아보겠습니다. 동적 쿼리를 작성할 때 발생하는 문제점들과 이를 해결하기 위한 Specification의 역할, 그리고 실제 사용 방법까지 단계별로 설명해드리겠습니다.</description>
    <pubDate>Mon, 10 Mar 2025 06:45:32 GMT</pubDate>
  </item><item>
    <title>도메인 주도 설계(DDD,Domain Driven Design)</title>
    <link>https://quartz.jzhao.xyz/%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84(DDD,Domain-Driven-Design)</link>
    <guid>https://quartz.jzhao.xyz/%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84(DDD,Domain-Driven-Design)</guid>
    <description>개요 Domain-Driven Design(DDD)은 복잡한 소프트웨어 시스템 개발에서 도메인(Domain) 모델을 중심으로 설계하고 구현하는 접근 방식입니다. DDD는 도메인 전문가와 개발자 사이의 긴밀한 협력을 통해 도메인 지식을 깊이 있게 이해하고, 이를 소프트웨어에 반영하여 비즈니스 가치에 부합하는 시스템을 구축합니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:44:44 GMT</pubDate>
  </item><item>
    <title>플라이웨이트 패턴(Flyweight Pattern)</title>
    <link>https://quartz.jzhao.xyz/%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4(Flyweight-Pattern)</link>
    <guid>https://quartz.jzhao.xyz/%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4(Flyweight-Pattern)</guid>
    <description>플라이웨이트 패턴은 구조 패턴의 하나로, 많은 수의 유사한 객체들이 필요할 때 메모리 사용을 최적화하기 위한 디자인 패턴입니다. 이 패턴은 객체의 상태를 ‘고유한(intrinsic) 상태’와 ‘공유한(extrinsic) 상태’로 분리하여, 동일한 고유 상태를 가진 객체들을 공유함으로써 메모리 사용량을 크게 줄일 수 있습니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:42:25 GMT</pubDate>
  </item><item>
    <title>값 객체(Value Objects)</title>
    <link>https://quartz.jzhao.xyz/%EA%B0%92-%EA%B0%9D%EC%B2%B4(Value-Objects)</link>
    <guid>https://quartz.jzhao.xyz/%EA%B0%92-%EA%B0%9D%EC%B2%B4(Value-Objects)</guid>
    <description>객체지향 설계에서 가장 흔히 접하는 객체는 엔티티(Entity)입니다. 하지만 도메인 모델링에서 똑같이 중요하지만 종종 간과되는 것이 바로 값 객체(Value Object)입니다. 오늘은 값 객체의 개념, 특성, 설계 방법 및 활용 사례에 대해 자세히 알아보겠습니다. 값 객체란 무엇인가? 값 객체는 개념적 식별성(conceptual identity)이 없는 도메인 객체입니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:37:38 GMT</pubDate>
  </item><item>
    <title>서비스(Service)</title>
    <link>https://quartz.jzhao.xyz/%EC%84%9C%EB%B9%84%EC%8A%A4(Service)</link>
    <guid>https://quartz.jzhao.xyz/%EC%84%9C%EB%B9%84%EC%8A%A4(Service)</guid>
    <description>소프트웨어 설계에서 모든 개념이 객체로 자연스럽게 모델링되는 것은 아닙니다. 도메인 주도 설계(DDD,Domain Driven Design)에서는 엔티티(Entity)와 값 객체(Value Objects)가 중요한 역할을 하지만, 이 두 범주에 속하지 않는 중요한 도메인 연산들도 존재합니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:35:54 GMT</pubDate>
  </item><item>
    <title>모델 주도 설계(Model-Driven Design)</title>
    <link>https://quartz.jzhao.xyz/%EB%AA%A8%EB%8D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84(Model-Driven-Design)</link>
    <guid>https://quartz.jzhao.xyz/%EB%AA%A8%EB%8D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84(Model-Driven-Design)</guid>
    <description>소프트웨어 개발에서 우리는 복잡한 현실 세계를 코드로 표현하고 구현해야 합니다. 이때 “모델(Model)“은 우리가 해결하고자 하는 문제 영역을 추상화하고 이해하는 데 핵심적인 역할을 합니다. 하지만 종종 분석 단계에서 만든 모델과 실제 구현된 설계가 서로 다를 때가 있습니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:35:34 GMT</pubDate>
  </item><item>
    <title>모델(Model)</title>
    <link>https://quartz.jzhao.xyz/%EB%AA%A8%EB%8D%B8(Model)</link>
    <guid>https://quartz.jzhao.xyz/%EB%AA%A8%EB%8D%B8(Model)</guid>
    <description>**도메인 모델(Domain Model)**은 특정 문제 영역(Domain)에 대한 조직화되고 구조화된 지식의 표현입니다. 이는 문제 도메인의 어휘와 핵심 개념을 나타내며, 도메인 범위 내 모든 엔티티들 간의 관계를 식별합니다. 도메인 모델은 다음과 같은 특징을 가집니다: 추상화: 현실 세계의 복잡성을 단순화하여 중요한 요소에 집중합니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:35:01 GMT</pubDate>
  </item><item>
    <title>Beoks의 개발자 블로그</title>
    <link>https://quartz.jzhao.xyz/</link>
    <guid>https://quartz.jzhao.xyz/</guid>
    <description>소개 안녕하세요! 저는 백엔드 개발자 Beoks입니다. 이 블로그에서는 개발 이론을 어떻게 실전에서 활용할 수 있는지에 대해 이야기합니다. 이론을 깊이 있게 공부하고, 그것을 실제로 적용하는 데 관심이 많습니다. 최신 기술 트렌드를 따라가며, 이를 프로젝트에 활용하는 것을 좋아합니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:14:10 GMT</pubDate>
  </item><item>
    <title>Public 함수 작성 원칙</title>
    <link>https://quartz.jzhao.xyz/Public-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%9B%90%EC%B9%99</link>
    <guid>https://quartz.jzhao.xyz/Public-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%9B%90%EC%B9%99</guid>
    <description>개발자로서 코드를 작성할 때 가장 중요한 것 중 하나는 미래의 사용성을 고려하는 것입니다. 특히 public 접근 제어자를 가진 함수들은 다른 개발자들에 의해 재사용될 가능성이 높기 때문에 더욱 신중하게 설계되어야 합니다. 이 글에서는 public 함수를 작성할 때 적용해야 할 원칙과 그 근거에 대해 알아보겠습니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:09:42 GMT</pubDate>
  </item>
    </channel>
  </rss>