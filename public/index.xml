<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>RESTful API</title>
    <link>https://quartz.jzhao.xyz/RESTful-API</link>
    <guid>https://quartz.jzhao.xyz/RESTful-API</guid>
    <description>RESTful API는 현대 웹 개발에서 가장 널리 사용되는 아키텍처 스타일입니다. 하지만 REST의 본질적 의미와 설계 원칙을 제대로 이해하고 적용하는 개발자는 많지 않습니다. 이는 REST가 단순한 HTTP 메서드 사용법이 아니라, 분산 시스템을 위한 정교한 아키텍처 철학에 기반하기 때문입니다.</description>
    <pubDate>Mon, 30 Jun 2025 05:54:31 GMT</pubDate>
  </item><item>
    <title>컨텐트 협상(Content Negotiation)</title>
    <link>https://quartz.jzhao.xyz/%EC%BB%A8%ED%85%90%ED%8A%B8-%ED%98%91%EC%83%81(Content-Negotiation)</link>
    <guid>https://quartz.jzhao.xyz/%EC%BB%A8%ED%85%90%ED%8A%B8-%ED%98%91%EC%83%81(Content-Negotiation)</guid>
    <description>컨텐트 협상(Content Negotiation)은 HTTP(HyperText Transfer Protocol) 프로토콜에서 클라이언트와 서버가 동일한 리소스에 대해 가장 적합한 표현(representation)을 선택하는 메커니즘입니다. 이는 RESTful API 설계의 핵심 원칙 중 하나로, 하나의 엔드포인트에서 여러 형식의 응답을 제공할 수 있게 해줍니다.</description>
    <pubDate>Mon, 30 Jun 2025 05:43:29 GMT</pubDate>
  </item><item>
    <title>Spring 엑셀 다운로드 기능 구현</title>
    <link>https://quartz.jzhao.xyz/Spring-%EC%97%91%EC%85%80-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84</link>
    <guid>https://quartz.jzhao.xyz/Spring-%EC%97%91%EC%85%80-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84</guid>
    <description>API 응답 데이터를 다양한 형식으로 제공해야 하는 요구사항은 현대 웹 서비스 개발에서 자주 마주치는 과제입니다. 특히 관리자 페이지나 보고서 시스템에서는 JSON 형태의 API 응답을 엑셀 파일로 다운로드할 수 있는 기능이 필요한 경우가 많습니다. 이 글에서는 Spring Framework에서 컨텐트 협상(Content Negotiation)을 활용하여 동일한 API 엔드포인트에서 JSON과 엑셀 파일을 모두 제공할 수 있는 기능을 구현하는 방법을 소개합니다.</description>
    <pubDate>Mon, 30 Jun 2025 05:41:15 GMT</pubDate>
  </item><item>
    <title>동시성과 병렬성의 차이</title>
    <link>https://quartz.jzhao.xyz/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4</link>
    <guid>https://quartz.jzhao.xyz/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4</guid>
    <description>동시성(Concurrency)과 병렬성(Parallelism)은 현대 소프트웨어 개발에서 중요한 개념이지만, 종종 혼동되어 사용됩니다. 이 두 개념은 여러 작업을 동시에 처리하는 방식에 관한 것이지만, 실제 구현 방식과 목적에서 중요한 차이가 있습니다. 동시성(Concurrency) 동시성은 여러 작업을 논리적으로 동시에 실행하는 것처럼 보이게 하는 개념입니다.</description>
    <pubDate>Mon, 30 Jun 2025 05:38:22 GMT</pubDate>
  </item><item>
    <title> Spring 데이터베이스 커넥션 관리</title>
    <link>https://quartz.jzhao.xyz/-Spring-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%BB%A4%EB%84%A5%EC%85%98-%EA%B4%80%EB%A6%AC</link>
    <guid>https://quartz.jzhao.xyz/-Spring-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%BB%A4%EB%84%A5%EC%85%98-%EA%B4%80%EB%A6%AC</guid>
    <description>Spring 데이터베이스 커넥션 관리 Spring 애플리케이션에서 데이터베이스 커넥션 관리는 성능과 안정성을 좌우하는 핵심 요소입니다. 효율적인 커넥션 관리 없이는 데이터베이스 연결 지연, 메모리 누수, 시스템 장애 등 다양한 문제가 발생할 수 있습니다. Spring은 이러한 복잡성을 추상화하여 개발자가 비즈니스 로직에 집중할 수 있도록 돕는 강력한 커넥션 관리 메커니즘을 제공합니다.</description>
    <pubDate>Wed, 25 Jun 2025 06:52:01 GMT</pubDate>
  </item><item>
    <title>Spring @TestConfiguration 어노테이션</title>
    <link>https://quartz.jzhao.xyz/Spring-@TestConfiguration-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</link>
    <guid>https://quartz.jzhao.xyz/Spring-@TestConfiguration-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</guid>
    <description>Spring @TestConfiguration 어노테이션 @TestConfiguration은 Spring Boot에서 테스트 환경에 특화된 설정을 정의하기 위한 어노테이션입니다. 이 어노테이션을 사용하면 운영 환경과는 별도로 테스트에만 사용할 빈을 정의하거나 기존 빈을 테스트용으로 대체할 수 있으며, 테스트의 독립성과 안정성을 보장하는 데 핵심적인 역할을 합니다.</description>
    <pubDate>Wed, 25 Jun 2025 01:19:18 GMT</pubDate>
  </item><item>
    <title>Spring @ContextConfiguration 어노테이션</title>
    <link>https://quartz.jzhao.xyz/Spring-@ContextConfiguration-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</link>
    <guid>https://quartz.jzhao.xyz/Spring-@ContextConfiguration-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</guid>
    <description>@ContextConfiguration은 Spring 테스트 프레임워크에서 ApplicationContext를 구성하기 위한 핵심 어노테이션입니다. 이 어노테이션을 통해 테스트에서 사용할 Spring 설정을 명시적으로 지정할 수 있으며, 다양한 방식으로 애플리케이션 컨텍스트를 로드할 수 있습니다.</description>
    <pubDate>Wed, 25 Jun 2025 01:05:19 GMT</pubDate>
  </item><item>
    <title>ComponentScan과 EntityScan의 차이점</title>
    <link>https://quartz.jzhao.xyz/ComponentScan%EA%B3%BC-EntityScan%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90</link>
    <guid>https://quartz.jzhao.xyz/ComponentScan%EA%B3%BC-EntityScan%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90</guid>
    <description>@ComponentScan과 @EntityScan의 차이점 Spring Boot 개발에서 자주 혼동되는 두 어노테이션인 @ComponentScan과 @EntityScan의 차이점을 명확히 이해하는 것은 효율적인 애플리케이션 구성을 위해 매우 중요합니다. 이 두 어노테이션은 비슷해 보이지만 완전히 다른 목적과 역할을 가지고 있습니다.</description>
    <pubDate>Wed, 25 Jun 2025 00:56:41 GMT</pubDate>
  </item><item>
    <title>EntityScan 어노테이션</title>
    <link>https://quartz.jzhao.xyz/EntityScan-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</link>
    <guid>https://quartz.jzhao.xyz/EntityScan-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</guid>
    <description>@EntityScan 어노테이션 @EntityScan은 Spring Boot에서 JPA 엔티티(Entity) 클래스들을 스캔할 패키지를 명시적으로 지정하는 어노테이션입니다. Spring Boot의 기본 자동 구성(Auto Configuration) 메커니즘을 보완하여, 복잡한 프로젝트 구조나 특별한 요구사항이 있는 경우에 엔티티 스캔 경로를 정밀하게 제어할 수 있습니다.</description>
    <pubDate>Wed, 25 Jun 2025 00:49:17 GMT</pubDate>
  </item><item>
    <title>DataJpaTest 어노테이션</title>
    <link>https://quartz.jzhao.xyz/DataJpaTest-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</link>
    <guid>https://quartz.jzhao.xyz/DataJpaTest-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98</guid>
    <description>@DataJpaTest 어노테이션 @DataJpaTest는 Spring Boot에서 제공하는 테스트 슬라이스 어노테이션으로, JPA 관련 컴포넌트만을 테스트 컨텍스트에 로드하여 효율적인 데이터 계층 테스트를 가능하게 합니다. 이 어노테이션은 JPA 리포지토리와 엔티티의 동작을 검증하는 데 특화되어 있으며, 전체 애플리케이션 컨텍스트를 로드하지 않아 빠른 테스트 실행이 가능합니다.</description>
    <pubDate>Tue, 24 Jun 2025 04:12:18 GMT</pubDate>
  </item>
    </channel>
  </rss>