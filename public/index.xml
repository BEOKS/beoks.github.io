<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>플라이웨이트 패턴(Flyweight Pattern)</title>
    <link>https://quartz.jzhao.xyz/%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4(Flyweight-Pattern)</link>
    <guid>https://quartz.jzhao.xyz/%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4(Flyweight-Pattern)</guid>
    <description>플라이웨이트 패턴은 구조 패턴의 하나로, 많은 수의 유사한 객체들이 필요할 때 메모리 사용을 최적화하기 위한 디자인 패턴입니다. 이 패턴은 객체의 상태를 ‘고유한(intrinsic) 상태’와 ‘공유한(extrinsic) 상태’로 분리하여, 동일한 고유 상태를 가진 객체들을 공유함으로써 메모리 사용량을 크게 줄일 수 있습니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:38:05 GMT</pubDate>
  </item><item>
    <title>서비스(Service)</title>
    <link>https://quartz.jzhao.xyz/%EC%84%9C%EB%B9%84%EC%8A%A4(Service)</link>
    <guid>https://quartz.jzhao.xyz/%EC%84%9C%EB%B9%84%EC%8A%A4(Service)</guid>
    <description>소프트웨어 설계에서 모든 개념이 객체로 자연스럽게 모델링되는 것은 아닙니다. 도메인 주도 설계(DDD,Domain Driven Design)에서는 엔티티(Entity)와 값 객체(Value Objects)가 중요한 역할을 하지만, 이 두 범주에 속하지 않는 중요한 도메인 연산들도 존재합니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:17:30 GMT</pubDate>
  </item><item>
    <title>값 객체(Value Objects)</title>
    <link>https://quartz.jzhao.xyz/%EA%B0%92-%EA%B0%9D%EC%B2%B4(Value-Objects)</link>
    <guid>https://quartz.jzhao.xyz/%EA%B0%92-%EA%B0%9D%EC%B2%B4(Value-Objects)</guid>
    <description>객체지향 설계에서 가장 흔히 접하는 객체는 엔티티(Entity)입니다. 하지만 도메인 모델링에서 똑같이 중요하지만 종종 간과되는 것이 바로 값 객체(Value Object)입니다. 오늘은 값 객체의 개념, 특성, 설계 방법 및 활용 사례에 대해 자세히 알아보겠습니다. 값 객체란 무엇인가? 값 객체는 개념적 식별성(conceptual identity)이 없는 도메인 객체입니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:09:42 GMT</pubDate>
  </item><item>
    <title>모델(Model)</title>
    <link>https://quartz.jzhao.xyz/%EB%AA%A8%EB%8D%B8(Model)</link>
    <guid>https://quartz.jzhao.xyz/%EB%AA%A8%EB%8D%B8(Model)</guid>
    <description>**도메인 모델(Domain Model)**은 특정 문제 영역(Domain)에 대한 조직화되고 구조화된 지식의 표현입니다. 이는 문제 도메인의 어휘와 핵심 개념을 나타내며, 도메인 범위 내 모든 엔티티들 간의 관계를 식별합니다. 도메인 모델은 다음과 같은 특징을 가집니다: 추상화: 현실 세계의 복잡성을 단순화하여 중요한 요소에 집중합니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:09:42 GMT</pubDate>
  </item><item>
    <title>엔티티(Entity) 와 Value Objects 의 차이</title>
    <link>https://quartz.jzhao.xyz/%EC%97%94%ED%8B%B0%ED%8B%B0(Entity)-%EC%99%80-Value-Objects-%EC%9D%98-%EC%B0%A8%EC%9D%B4</link>
    <guid>https://quartz.jzhao.xyz/%EC%97%94%ED%8B%B0%ED%8B%B0(Entity)-%EC%99%80-Value-Objects-%EC%9D%98-%EC%B0%A8%EC%9D%B4</guid>
    <description>엔티티와 VO 의 차이는 고유성을 어떻게 정의하냐에 따라 달라진다. 예를 들어서 2차원 좌표 (x,y)를 정의할때, VO 로 정의할 경우 x와 y의 값이 같으면 동일하다고 정의한다. 즉, 속성의 값에 따라서 그 고유성이 정해지는 것이다. 따라서 (1,2) 와 (1,2)는 서로 다른 메모리에 저장되어 있다고 해도 동일하다고 할 수 있다.</description>
    <pubDate>Mon, 10 Mar 2025 00:09:42 GMT</pubDate>
  </item><item>
    <title>좋은 코드 리뷰의 조건</title>
    <link>https://quartz.jzhao.xyz/%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0%EC%9D%98-%EC%A1%B0%EA%B1%B4</link>
    <guid>https://quartz.jzhao.xyz/%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0%EC%9D%98-%EC%A1%B0%EA%B1%B4</guid>
    <description>코드 리뷰는 소프트웨어 개발 과정에서 핵심적인 단계입니다. 단순히 버그를 찾는 것을 넘어, 지식 공유와 팀 문화 형성에 중요한 역할을 합니다. 이 글에서는 “코드 리뷰를 잘한다”는 평가를 받기 위한 핵심 조건들을 살펴보겠습니다. 목차 기술적 역량 - 코드 리뷰의 기초 커뮤니케이션 기술 - 피드백의 예술 일관성과 신뢰성 - 좋은 리뷰어의 표식 코드 리뷰 과정 최적화 배움의 자세 유지하기 사례 연구: 효과적인 코드 리뷰의 예 코드 리뷰 체크리스트 결론 기술적 역량 - 코드 리뷰의 기초 깊이 있는 코드 이해 코드 리뷰를 잘하기 위한 첫 번째 조건은 깊이 있는 기술적 이해입니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:09:42 GMT</pubDate>
  </item><item>
    <title>Public 함수 작성 원칙</title>
    <link>https://quartz.jzhao.xyz/Public-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%9B%90%EC%B9%99</link>
    <guid>https://quartz.jzhao.xyz/Public-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%9B%90%EC%B9%99</guid>
    <description>개발자로서 코드를 작성할 때 가장 중요한 것 중 하나는 미래의 사용성을 고려하는 것입니다. 특히 public 접근 제어자를 가진 함수들은 다른 개발자들에 의해 재사용될 가능성이 높기 때문에 더욱 신중하게 설계되어야 합니다. 이 글에서는 public 함수를 작성할 때 적용해야 할 원칙과 그 근거에 대해 알아보겠습니다.</description>
    <pubDate>Mon, 10 Mar 2025 00:09:42 GMT</pubDate>
  </item><item>
    <title>주제영역(Subject Area)</title>
    <link>https://quartz.jzhao.xyz/%EC%A3%BC%EC%A0%9C%EC%98%81%EC%97%AD(Subject-Area)</link>
    <guid>https://quartz.jzhao.xyz/%EC%A3%BC%EC%A0%9C%EC%98%81%EC%97%AD(Subject-Area)</guid>
    <description>서론 소프트웨어 개발에서 데이터 관리는 핵심적인 과제입니다. 특히 복잡한 엔터프라이즈 시스템에서는 수많은 데이터 엔티티와 그들 간의 관계를 효과적으로 조직화하는 것이 중요합니다. 이를 위한 강력한 방법론 중 하나가 바로 ‘주제영역(Subject Area)’ 접근법입니다. 주제영역이란? 주제영역은 비즈니스 도메인 내에서 논리적으로 연관된 데이터 엔티티들의 그룹을 의미합니다.</description>
    <pubDate>Tue, 04 Mar 2025 09:07:44 GMT</pubDate>
  </item><item>
    <title>캐싱(Caching)</title>
    <link>https://quartz.jzhao.xyz/%EC%BA%90%EC%8B%B1(Caching)</link>
    <guid>https://quartz.jzhao.xyz/%EC%BA%90%EC%8B%B1(Caching)</guid>
    <description>1. 캐싱이란? 캐싱(Caching)은 자주 사용되는 데이터를 미리 저장하여 빠르게 접근할 수 있도록 하는 기술입니다. 이는 시스템의 성능을 향상시키고, 응답 시간을 단축하며, 서버 부하를 줄이는 중요한 전략 중 하나입니다. 웹 애플리케이션, 데이터베이스, API 등 다양한 분야에서 활용됩니다.</description>
    <pubDate>Tue, 04 Mar 2025 09:07:44 GMT</pubDate>
  </item><item>
    <title>컨텍스트 맵핑(Context Mapping)</title>
    <link>https://quartz.jzhao.xyz/%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%B5%ED%95%91(Context-Mapping)</link>
    <guid>https://quartz.jzhao.xyz/%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A7%B5%ED%95%91(Context-Mapping)</guid>
    <description>컨텍스트 맵핑이란? 컨텍스트 맵핑은 여러 바운디드 컨텍스트(Bounded Context) 간의 관계를 시각화하고 문서화하는 기술입니다. 각 바운디드 컨텍스트는 자체적인 모델, 언어, 경계를 가지고 있으며, 이들이 어떻게 상호작용하고 통합되는지 명확하게 표현하는 것이 컨텍스트 맵핑의 목적입니다.</description>
    <pubDate>Tue, 04 Mar 2025 09:07:44 GMT</pubDate>
  </item>
    </channel>
  </rss>