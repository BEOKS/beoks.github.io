<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Untitled</title>
    <link>https://quartz.jzhao.xyz/attachements/Untitled</link>
    <guid>https://quartz.jzhao.xyz/attachements/Untitled</guid>
    <description></description>
    <pubDate>Mon, 24 Feb 2025 13:04:11 GMT</pubDate>
  </item><item>
    <title>개발 공부 노트 정리에 옵시디언을 사용하는 이유</title>
    <link>https://quartz.jzhao.xyz/%EA%B0%9C%EB%B0%9C-%EA%B3%B5%EB%B6%80-%EB%85%B8%ED%8A%B8-%EC%A0%95%EB%A6%AC%EC%97%90-%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0</link>
    <guid>https://quartz.jzhao.xyz/%EA%B0%9C%EB%B0%9C-%EA%B3%B5%EB%B6%80-%EB%85%B8%ED%8A%B8-%EC%A0%95%EB%A6%AC%EC%97%90-%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0</guid>
    <description>개발자로서 새로운 기술과 지식을 습득하는 것은 일상입니다. 매일매일 쏟아지는 정보와 학습 내용을 효율적으로 정리하고 관리하는 것은 생산성을 높이는 데 필수적입니다. 여러 노트 앱과 도구들이 있지만, 그 중에서도 최근 주목받는 것이 바로 옵시디언(Obsidian) 입니다. 왜 많은 개발자들이 옵시디언을 선택하는지 그 이유를 알아보겠습니다.</description>
    <pubDate>Mon, 24 Feb 2025 12:57:42 GMT</pubDate>
  </item><item>
    <title>프로덕션 언어(Production Language)</title>
    <link>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EB%8D%95%EC%85%98-%EC%96%B8%EC%96%B4(Production-Language)</link>
    <guid>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%EB%8D%95%EC%85%98-%EC%96%B8%EC%96%B4(Production-Language)</guid>
    <description> 실제 소프트웨어 개발에서 널리 사용될 목적으로 설계된 언어. 안정성, 유지보수성, 성능이 중요하게 고려됌 연구, 학습, 실험적인 목적보다는 상용 제품 개발을 목표로 하며, 대규모 시스템에서도 안정적으로 동작할 수 있도록 설계됌 대표적인 프로덕션 언어 Java: 안정성과 유지보수성이 뛰어나고, 대규모 시스템에 적합한 언어.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item><item>
    <title>프로토타입 기반 언어</title>
    <link>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4</link>
    <guid>https://quartz.jzhao.xyz/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4</guid>
    <description>프로토타입 기반 언어는 클래스를 사용하지 않고 객체를 생성하는 방식입니다. 대신, 객체는 다른 객체를 **프로토타입(prototype)**으로 하여 복제됩니다. 즉, 객체는 다른 객체를 기반으로 하여 자신의 특성(속성 및 메서드)을 상속받습니다. 프로토타입 기반 언어의 동작 방식 객체 생성과 프로토타입 연결 프로토타입 기반 언어에서 객체는 **기존 객체를 복제(clone)**하거나 프로토타입을 설정하여 생성됩니다.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item><item>
    <title>추상화</title>
    <link>https://quartz.jzhao.xyz/%EC%B6%94%EC%83%81%ED%99%94</link>
    <guid>https://quartz.jzhao.xyz/%EC%B6%94%EC%83%81%ED%99%94</guid>
    <description>프로그래밍에서 **추상화(Abstraction)**는 복잡한 시스템이나 개념을 단순화하여 이해하기 쉽게 만드는 기법을 말합니다. 이는 세부 구현이나 복잡한 내부 구조를 감추고 필요한 부분만을 노출하여 프로그래머나 사용자가 시스템을 더 효율적으로 사용할 수 있게 해줍니다.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item><item>
    <title>추상화는 어떻게 모듈화를 지원하는가</title>
    <link>https://quartz.jzhao.xyz/%EC%B6%94%EC%83%81%ED%99%94%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%AA%A8%EB%93%88%ED%99%94%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94%EA%B0%80</link>
    <guid>https://quartz.jzhao.xyz/%EC%B6%94%EC%83%81%ED%99%94%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%AA%A8%EB%93%88%ED%99%94%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94%EA%B0%80</guid>
    <description>추상화는 프로그래밍에서 복잡한 시스템의 세부 구현을 감추고, 필요한 기능이나 인터페이스만을 노출하여 시스템을 단순ㅎ화하는 기법입니다. 이는 복잡성을 줄이고 코드의 이해와 유지보수를 쉽게 만들어줍니다. 한편, 모듈화는 프로그램을 기능별로 나누어 독립적인 단위인 모듈로 구성하는 것을 말합니다.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item><item>
    <title>코드의 안정성</title>
    <link>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%95%88%EC%A0%95%EC%84%B1</link>
    <guid>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%95%88%EC%A0%95%EC%84%B1</guid>
    <description>코드의 안전성은 소프트웨어가 예기치 않은 상황에서도 안정적으로 작동하고, 악의적인 공격이나 오류로부터 보호될 수 있도록 작성되었는지를 의미합니다. 이를 보장하기 위해 고려해야 할 주요 요소들을 자세히 살펴보면 다음과 같습니다. 코드 안정성 주요 요소 입력 검증 및 데이터 유효성 검사 정의: 외부로부터 입력받는 데이터가 예상한 형식과 범위에 있는지 확인하는 과정입니다.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item><item>
    <title>코드의 유지보수성</title>
    <link>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1</link>
    <guid>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1</guid>
    <description>코드의 유지보수성은 프로그램이 시간이 지나면서 수정, 확장, 버그 수정 및 최적화를 얼마나 쉽게 할 수 있는가를 나타내는 소프트웨어 품질의 중요한 측면입니다. 유지보수성이 좋은 코드는 새로운 기능 추가나 문제 해결이 필요할 때 빠르고 안전하게 변경할 수 있어 전체 개발 비용과 시간을 줄이는 데 큰 도움이 됩니다.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item><item>
    <title>코드의 확장성(Extensibility)</title>
    <link>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C%EC%9D%98-%ED%99%95%EC%9E%A5%EC%84%B1(Extensibility)</link>
    <guid>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C%EC%9D%98-%ED%99%95%EC%9E%A5%EC%84%B1(Extensibility)</guid>
    <description>1. 코드의 확장성이란 무엇인가? 코드의 **확장성(Extensibility)**은 소프트웨어 시스템에서 새로운 기능이나 모듈을 추가하거나 기존 기능을 변경할 때, 기존 코드베이스에 대한 수정 없이 또는 최소한의 수정으로 이러한 변경을 용이하게 수행할 수 있는 능력을 말합니다.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item><item>
    <title>클래스 기반 언어(Class-based Language)</title>
    <link>https://quartz.jzhao.xyz/%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4(Class-based-Language)</link>
    <guid>https://quartz.jzhao.xyz/%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4(Class-based-Language)</guid>
    <description>정의 클래스 기반 언어는 객체 지향 언어 패러다임을 따르는 언어 중에서, **클래스(class)**를 중심으로 객체(object)를 생성하고 관리하는 방식을 채택한 언어를 의미한다. 클래스 : 데이터(필드,상태)와 이를 조작하는 메서드(행동, 프로시즈)를 포함하는 청사진(템플릿) 역할을 한다.</description>
    <pubDate>Mon, 24 Feb 2025 12:52:17 GMT</pubDate>
  </item>
    </channel>
  </rss>