<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Public 함수 작성 원칙</title>
    <link>https://quartz.jzhao.xyz/Public-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%9B%90%EC%B9%99</link>
    <guid>https://quartz.jzhao.xyz/Public-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%9B%90%EC%B9%99</guid>
    <description>개발자로서 코드를 작성할 때 가장 중요한 것 중 하나는 미래의 사용성을 고려하는 것입니다. 특히 public 접근 제어자를 가진 함수들은 다른 개발자들에 의해 재사용될 가능성이 높기 때문에 더욱 신중하게 설계되어야 합니다. 이 글에서는 public 함수를 작성할 때 적용해야 할 원칙과 그 근거에 대해 알아보겠습니다.</description>
    <pubDate>Fri, 07 Mar 2025 14:14:44 GMT</pubDate>
  </item><item>
    <title>엔티티(Entity) 와 Value Objects 의 차이</title>
    <link>https://quartz.jzhao.xyz/%EC%97%94%ED%8B%B0%ED%8B%B0(Entity)-%EC%99%80-Value-Objects-%EC%9D%98-%EC%B0%A8%EC%9D%B4</link>
    <guid>https://quartz.jzhao.xyz/%EC%97%94%ED%8B%B0%ED%8B%B0(Entity)-%EC%99%80-Value-Objects-%EC%9D%98-%EC%B0%A8%EC%9D%B4</guid>
    <description>엔티티와 VO 의 차이는 고유성을 어떻게 정의하냐에 따라 달라진다. 예를 들어서 2차원 좌표 (x,y)를 정의할때, VO 로 정의할 경우 x와 y의 값이 같으면 동일하다고 정의한다. 즉, 속성의 값에 따라서 그 고유성이 정해지는 것이다. 따라서 (1,2) 와 (1,2)는 서로 다른 메모리에 저장되어 있다고 해도 동일하다고 할 수 있다.</description>
    <pubDate>Sun, 02 Mar 2025 04:29:47 GMT</pubDate>
  </item><item>
    <title>Value Objects</title>
    <link>https://quartz.jzhao.xyz/Value-Objects</link>
    <guid>https://quartz.jzhao.xyz/Value-Objects</guid>
    <description>관련 자료 엔티티(Entity) 와 Value Objects 의 차이.</description>
    <pubDate>Sun, 02 Mar 2025 04:29:21 GMT</pubDate>
  </item><item>
    <title>코드 스멜</title>
    <link>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C-%EC%8A%A4%EB%A9%9C</link>
    <guid>https://quartz.jzhao.xyz/%EC%BD%94%EB%93%9C-%EC%8A%A4%EB%A9%9C</guid>
    <description>서론 소프트웨어 개발에서 “코드 스멜(Code Smell)“이라는 용어를 들어본 적이 있으신가요? 이는 마틴 파울러(Martin Fowler)와 켄트 벡(Kent Beck)이 그들의 저서 “리팩토링: 코드 품질을 개선하는 기술”에서 처음 대중화한 개념입니다. 코드 스멜은 겉으로 보기에는 작동하지만, 더 깊은 문제를 암시하는 코드의 특성을 의미합니다.</description>
    <pubDate>Thu, 27 Feb 2025 13:53:44 GMT</pubDate>
  </item><item>
    <title>유비쿼터스 언어(Ubiquitous Language)</title>
    <link>https://quartz.jzhao.xyz/%EC%9C%A0%EB%B9%84%EC%BF%BC%ED%84%B0%EC%8A%A4-%EC%96%B8%EC%96%B4(Ubiquitous-Language)</link>
    <guid>https://quartz.jzhao.xyz/%EC%9C%A0%EB%B9%84%EC%BF%BC%ED%84%B0%EC%8A%A4-%EC%96%B8%EC%96%B4(Ubiquitous-Language)</guid>
    <description>소프트웨어 개발 프로젝트에서 팀원 간의 의사소통은 성공의 핵심 요소입니다. 하지만 개발자와 도메인 전문가가 서로 다른 언어를 사용한다면 오해와 비효율이 발생할 수 있습니다. 이를 해결하기 위한 방법으로 도메인 주도 설계(DDD)에서는 유비쿼터스 언어(Ubiquitous Language) 의 사용을 강조합니다.</description>
    <pubDate>Thu, 27 Feb 2025 13:53:44 GMT</pubDate>
  </item><item>
    <title>유비쿼터스 언어의 적용 사례</title>
    <link>https://quartz.jzhao.xyz/%EC%9C%A0%EB%B9%84%EC%BF%BC%ED%84%B0%EC%8A%A4-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%A0%81%EC%9A%A9-%EC%82%AC%EB%A1%80</link>
    <guid>https://quartz.jzhao.xyz/%EC%9C%A0%EB%B9%84%EC%BF%BC%ED%84%B0%EC%8A%A4-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%A0%81%EC%9A%A9-%EC%82%AC%EB%A1%80</guid>
    <description>도메인 주도 설계(DDD,Domain Driven Design)에서 유비쿼터스 언어(Ubiquitous Language)는 개발팀과 도메인 전문가 간의 공통 언어를 구축하여 소프트웨어 모델링과 구현에 일관성을 부여하는 핵심 요소입니다. 다음은 유비쿼터스 언어를 적용한 사례들입니다.</description>
    <pubDate>Thu, 27 Feb 2025 13:53:44 GMT</pubDate>
  </item><item>
    <title>좋은 코드 리뷰의 조건</title>
    <link>https://quartz.jzhao.xyz/%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0%EC%9D%98-%EC%A1%B0%EA%B1%B4</link>
    <guid>https://quartz.jzhao.xyz/%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0%EC%9D%98-%EC%A1%B0%EA%B1%B4</guid>
    <description>코드 리뷰는 소프트웨어 개발 과정에서 핵심적인 단계입니다. 단순히 버그를 찾는 것을 넘어, 지식 공유와 팀 문화 형성에 중요한 역할을 합니다. 이 글에서는 “코드 리뷰를 잘한다”는 평가를 받기 위한 핵심 조건들을 살펴보겠습니다. 목차 기술적 역량 - 코드 리뷰의 기초 커뮤니케이션 기술 - 피드백의 예술 일관성과 신뢰성 - 좋은 리뷰어의 표식 코드 리뷰 과정 최적화 배움의 자세 유지하기 사례 연구: 효과적인 코드 리뷰의 예 코드 리뷰 체크리스트 결론 기술적 역량 - 코드 리뷰의 기초 깊이 있는 코드 이해 코드 리뷰를 잘하기 위한 첫 번째 조건은 깊이 있는 기술적 이해입니다.</description>
    <pubDate>Thu, 27 Feb 2025 13:53:44 GMT</pubDate>
  </item><item>
    <title>엔티티(Entity)</title>
    <link>https://quartz.jzhao.xyz/%EC%97%94%ED%8B%B0%ED%8B%B0(Entity)</link>
    <guid>https://quartz.jzhao.xyz/%EC%97%94%ED%8B%B0%ED%8B%B0(Entity)</guid>
    <description>엔티티란 무엇인가? 엔티티는 고유한 식별성을 가진 객체를 말합니다. 다시 말해, 엔티티는 그 속성으로 정의되는 것이 아니라, 식별을 통해 구분되는 객체입니다. 이는 시간이 지나도 동일한 객체로 인식되어야 하는 경우에 해당합니다. 속성이 아닌 식별성으로 정의되는 객체 많은 객체들은 속성이 변하더라도 동일한 객체로 인식되어야 합니다.</description>
    <pubDate>Thu, 27 Feb 2025 13:53:44 GMT</pubDate>
  </item><item>
    <title>Spring Boot Session Redis 연동하기</title>
    <link>https://quartz.jzhao.xyz/Spring-Boot-Session-Redis-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0</link>
    <guid>https://quartz.jzhao.xyz/Spring-Boot-Session-Redis-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0</guid>
    <description>Spring 에서 사용자 정보 관리를 위해 세션(Session)을 사용하는 경우가 많습니다. Spring Sesison 의 기본 세션 스토리지(Session Storage)는 서버 인메모리입니다. 이는 여러 서버에 공유되지 않아 여러 서버가 공유하기 어렵고 서버 재실행 시 초기화된다는 단점이 있습니다.</description>
    <pubDate>Thu, 27 Feb 2025 13:53:44 GMT</pubDate>
  </item><item>
    <title>Ubiquitous Language</title>
    <link>https://quartz.jzhao.xyz/Ubiquitous-Language</link>
    <guid>https://quartz.jzhao.xyz/Ubiquitous-Language</guid>
    <description></description>
    <pubDate>Thu, 27 Feb 2025 13:53:44 GMT</pubDate>
  </item>
    </channel>
  </rss>