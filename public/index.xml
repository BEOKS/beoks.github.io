<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>CAP 이론</title>
    <link>https://quartz.jzhao.xyz/CAP-%EC%9D%B4%EB%A1%A0</link>
    <guid>https://quartz.jzhao.xyz/CAP-%EC%9D%B4%EB%A1%A0</guid>
    <description>CAP 이론은 분산 시스템에서 세 가지 핵심 속성인 일관성(Consistency), 가용성(Availability), 분할 내성(Partition tolerance)을 동시에 모두 만족시키는 것이 수학적으로 불가능하다는 중요한 정리입니다. 2000년 컴퓨터 과학자 에릭 브루어(Eric Brewer)가 처음 제안한 이 이론은 분산 데이터베이스 및 시스템 설계에 있어 근본적인 제약 조건으로 작용합니다.</description>
    <pubDate>Thu, 27 Mar 2025 04:23:58 GMT</pubDate>
  </item><item>
    <title>분산 시스템 아키텍처</title>
    <link>https://quartz.jzhao.xyz/%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98</link>
    <guid>https://quartz.jzhao.xyz/%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98</guid>
    <description></description>
    <pubDate>Thu, 27 Mar 2025 04:18:37 GMT</pubDate>
  </item><item>
    <title>분산 시스템</title>
    <link>https://quartz.jzhao.xyz/%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C</link>
    <guid>https://quartz.jzhao.xyz/%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C</guid>
    <description>분산 시스템은 네트워크로 연결된 여러 독립적인 컴퓨터들이 하나의 시스템처럼 동작하는 컴퓨팅 환경입니다. 사용자 관점에서는 단일 시스템처럼 보이지만, 실제로는 여러 노드가 협력하여 작업을 처리합니다. 이러한 분산 시스템은 오늘날 대규모 웹 서비스, 클라우드 컴퓨팅, 빅데이터 처리 등 다양한 영역에서 필수적인 요소가 되었습니다.</description>
    <pubDate>Thu, 27 Mar 2025 04:18:37 GMT</pubDate>
  </item><item>
    <title>메시지 지향 미들웨어(Message-Oriented Middleware, MOM)</title>
    <link>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%A7%80%ED%96%A5-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4(Message-Oriented-Middleware,-MOM)</link>
    <guid>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%A7%80%ED%96%A5-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4(Message-Oriented-Middleware,-MOM)</guid>
    <description>메시지 지향 미들웨어(Message-Oriented Middleware, MOM)는 분산 시스템 간의 메시지 교환을 가능하게 하는 소프트웨어 또는 하드웨어 인프라입니다. 이 미들웨어는 서로 다른 애플리케이션 간에 비동기 통신을 제공하며, 시스템 간의 직접적인 연결 없이도 데이터를 안전하게 교환할 수 있도록 합니다.</description>
    <pubDate>Thu, 27 Mar 2025 04:15:50 GMT</pubDate>
  </item><item>
    <title>메시지 기반 아키텍처(Message-Based Architecture)</title>
    <link>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B8%B0%EB%B0%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98(Message-Based-Architecture)</link>
    <guid>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B8%B0%EB%B0%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98(Message-Based-Architecture)</guid>
    <description>메시지 기반 아키텍처는 시스템 간의 통신을 메시지 교환을 통해 수행하는 소프트웨어 설계 패턴입니다. 이 아키텍처에서는 시스템 구성 요소가 직접적인 호출 대신 메시지를 통해 정보를 교환하며, 이를 통해 느슨한 결합(Loose Coupling)과 비동기(Asynchronous) 처리가 가능해집니다.</description>
    <pubDate>Thu, 27 Mar 2025 04:13:54 GMT</pubDate>
  </item><item>
    <title>JMS(Java Message Service)</title>
    <link>https://quartz.jzhao.xyz/JMS(Java-Message-Service)</link>
    <guid>https://quartz.jzhao.xyz/JMS(Java-Message-Service)</guid>
    <description>MS(Java Message Service)는 자바 기반 애플리케이션 간에 메시지를 주고받을 수 있도록 하는 표준 API입니다. 이 API는 Java EE(Enterprise Edition)의 일부로서, 서로 다른 시스템 간의 안정적인 비동기 통신을 가능하게 합니다. JMS는 메시지 지향 미들웨어(Message-Oriented Middleware, MOM)의 개념을 자바 환경에서 구현한 것으로, 분산 시스템 간의 느슨한 결합을 촉진합니다.</description>
    <pubDate>Thu, 27 Mar 2025 04:12:11 GMT</pubDate>
  </item><item>
    <title>Untitled</title>
    <link>https://quartz.jzhao.xyz/Untitled</link>
    <guid>https://quartz.jzhao.xyz/Untitled</guid>
    <description></description>
    <pubDate>Thu, 27 Mar 2025 04:09:35 GMT</pubDate>
  </item><item>
    <title>메시지와 이벤트의 차이</title>
    <link>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80%EC%99%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4</link>
    <guid>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80%EC%99%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4</guid>
    <description>메시지 브로커 시스템을 설계하고 구현할 때 ‘메시지’와 ‘이벤트’라는 용어가 자주 혼용되지만, 둘 사이에는 개념적으로 중요한 차이가 있습니다. 이 차이를 이해하면 분산 시스템을 더 효과적으로 설계하고 구현할 수 있습니다. 기본 개념 차이 메시지(Message) 정의: 송신자가 수신자에게 전달하려는 데이터 단위입니다.</description>
    <pubDate>Thu, 27 Mar 2025 04:09:35 GMT</pubDate>
  </item><item>
    <title>메시지(Message)</title>
    <link>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80(Message)</link>
    <guid>https://quartz.jzhao.xyz/%EB%A9%94%EC%8B%9C%EC%A7%80(Message)</guid>
    <description>메시지는 분산 시스템에서 애플리케이션 간 데이터를 전달하는 기본 단위입니다. 메시지 브로커(Message Broker)와 같은 중간 계층을 통해 송신자(Producer)가 수신자(Consumer)에게 정보를 전달하기 위해 사용하는 데이터 패킷입니다. 메시지는 현대 소프트웨어 아키텍처, 특히 마이크로서비스 환경에서 시스템 간 통신의 핵심 요소로 작용합니다.</description>
    <pubDate>Thu, 27 Mar 2025 04:09:06 GMT</pubDate>
  </item><item>
    <title>Spring Async 동작 원리</title>
    <link>https://quartz.jzhao.xyz/Spring-Async-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC</link>
    <guid>https://quartz.jzhao.xyz/Spring-Async-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC</guid>
    <description>Spring Framework에서 제공하는 비동기 처리 기능인 Async는 시간이 오래 걸리는 작업을 별도의 스레드에서 실행하여 애플리케이션의 응답성과 성능을 향상시키는 중요한 기능입니다. Spring Async의 동작 원리를 이해하면 더 효율적인 애플리케이션을 설계하고 구현할 수 있습니다.</description>
    <pubDate>Thu, 27 Mar 2025 02:00:56 GMT</pubDate>
  </item>
    </channel>
  </rss>