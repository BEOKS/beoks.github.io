<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Beoks Blog</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>최근 10 건 on 🪴 Beoks Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>B Tree</title>
    <link>https://quartz.jzhao.xyz/B-Tree</link>
    <guid>https://quartz.jzhao.xyz/B-Tree</guid>
    <description>B 트리(B Tree)는 B+ Tree와 마찬가지로 데이터베이스 및 파일 시스템에서 대량의 데이터를 효율적으로 저장하고 검색하기 위해 사용되는 자가 균형 이진 탐색 트리(Self-balancing Binary Search Tree)의 일반화된 형태입니다. B 트리는 특히 디스크와 같은 블록 지향 저장 장치에 최적화되어 있으며, 모든 노드에 데이터가 저장될 수 있다는 점에서 B+ Tree와 주요한 차이를 보입니다.</description>
    <pubDate>Tue, 08 Jul 2025 05:49:41 GMT</pubDate>
  </item><item>
    <title>B+ Tree</title>
    <link>https://quartz.jzhao.xyz/B+-Tree</link>
    <guid>https://quartz.jzhao.xyz/B+-Tree</guid>
    <description>B+ 트리(B+ Tree)는 데이터베이스 및 파일 시스템에서 널리 사용되는 트리 기반의 자료구조입니다. 특히 대량의 데이터를 효율적으로 저장하고 검색하기 위한 인덱스 구조로 최적화되어 있습니다. B+ 트리는 B-트리의 변형으로, 디스크와 같은 블록 지향 저장 장치에 적합하도록 설계되었습니다.</description>
    <pubDate>Tue, 08 Jul 2025 05:42:36 GMT</pubDate>
  </item><item>
    <title>RBAC 인터페이스 정의</title>
    <link>https://quartz.jzhao.xyz/RBAC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98</link>
    <guid>https://quartz.jzhao.xyz/RBAC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98</guid>
    <description>RBAC 시스템의 각 핵심 컴포넌트(역할, 권한, 사용자-역할 매핑, 역할-권한 매핑)는 명확한 인터페이스를 통해 상호작용하도록 설계하는 것이 좋습니다. 이는 시스템의 모듈성을 높이고, 향후 구현 변경에 유연하게 대응할 수 있도록 합니다. 역할(Role)과 권한(Permission)의 상세 인터페이스 정의는 각각 Role 인터페이스 정의와 Permission 인터페이스 정의를 참고해주세요.</description>
    <pubDate>Tue, 08 Jul 2025 05:37:07 GMT</pubDate>
  </item><item>
    <title>Permission 인터페이스 정의</title>
    <link>https://quartz.jzhao.xyz/Permission-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98</link>
    <guid>https://quartz.jzhao.xyz/Permission-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98</guid>
    <description>Permission 인터페이스는 시스템 내에서 정의되는 권한의 기본 구조를 나타냅니다. public interface Permission { Long getId(); String getName(); void setId(Long id); void setName(String name); }.</description>
    <pubDate>Tue, 08 Jul 2025 05:30:14 GMT</pubDate>
  </item><item>
    <title>Role 인터페이스 정의</title>
    <link>https://quartz.jzhao.xyz/Role-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98</link>
    <guid>https://quartz.jzhao.xyz/Role-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98</guid>
    <description>Role 인터페이스는 시스템 내에서 정의되는 역할의 기본 구조를 나타냅니다. public interface Role { Long getId(); String getName(); Set&lt;Permission&gt; getPermissions(); void setId(Long id); void setName(String name); void setPermissions(Set&lt;Permission&gt; permissions); }.</description>
    <pubDate>Tue, 08 Jul 2025 05:30:10 GMT</pubDate>
  </item><item>
    <title>RBAC 개발 가이드 (Role-Based Access Control Development Guide)</title>
    <link>https://quartz.jzhao.xyz/RBAC-%EA%B0%9C%EB%B0%9C-%EA%B0%80%EC%9D%B4%EB%93%9C</link>
    <guid>https://quartz.jzhao.xyz/RBAC-%EA%B0%9C%EB%B0%9C-%EA%B0%80%EC%9D%B4%EB%93%9C</guid>
    <description>역할 기반 접근 제어(RBAC)는 현대 소프트웨어 시스템에서 효율적이고 안전한 권한 관리를 위한 핵심적인 모델입니다. 이 가이드는 RBAC를 실제 시스템에 구현하기 위한 개발 관점의 접근 방법과 모범 사례를 제공합니다. 1. RBAC 구현의 핵심 단계 RBAC를 시스템에 성공적으로 구현하기 위해서는 다음과 같은 핵심 단계를 따르는 것이 중요합니다.</description>
    <pubDate>Tue, 08 Jul 2025 05:28:56 GMT</pubDate>
  </item><item>
    <title>기능 추가에 따른 RBAC 관리 비용 절감 전략</title>
    <link>https://quartz.jzhao.xyz/%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%EC%97%90-%EB%94%B0%EB%A5%B8-RBAC-%EA%B4%80%EB%A6%AC-%EB%B9%84%EC%9A%A9-%EC%A0%88%EA%B0%90-%EC%A0%84%EB%9E%B5</link>
    <guid>https://quartz.jzhao.xyz/%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%EC%97%90-%EB%94%B0%EB%A5%B8-RBAC-%EA%B4%80%EB%A6%AC-%EB%B9%84%EC%9A%A9-%EC%A0%88%EA%B0%90-%EC%A0%84%EB%9E%B5</guid>
    <description>RBAC(역할 기반 접근 제어)는 강력하고 직관적인 접근 제어 모델이지만, 새로운 기능이 추가될 때마다 관련된 권한(Permission)과 역할(Role)을 수동으로 정의하고 연결하는 작업은 상당한 관리 비용을 유발합니다. 이는 개발 속도를 저해하고, 권한 설정 오류의 가능성을 높이는 원인이 되기도 합니다.</description>
    <pubDate>Tue, 08 Jul 2025 05:21:53 GMT</pubDate>
  </item><item>
    <title>ABAC 개발 가이드 (Attribute-Based Access Control Development Guide)</title>
    <link>https://quartz.jzhao.xyz/ABAC-%EA%B0%9C%EB%B0%9C-%EA%B0%80%EC%9D%B4%EB%93%9C</link>
    <guid>https://quartz.jzhao.xyz/ABAC-%EA%B0%9C%EB%B0%9C-%EA%B0%80%EC%9D%B4%EB%93%9C</guid>
    <description>속성 기반 접근 제어는 사용자, 리소스, 환경 등 접근 요청과 관련된 다양한 **속성(Attribute)**들을 기반으로 정책을 수립하고, 이 정책에 따라 접근 권한을 동적으로 결정하는 접근 제어 모델입니다. RBAC가 역할에 기반한 정적인 권한 관리에 강점이 있다면, ABAC는 매우 세분화되고 동적인 접근 제어가 필요한 복잡한 환경에 적합합니다.</description>
    <pubDate>Tue, 08 Jul 2025 02:03:12 GMT</pubDate>
  </item><item>
    <title>역할 기반 접근 제어 (RBAC: Role-Based Access Control)</title>
    <link>https://quartz.jzhao.xyz/%EC%97%AD%ED%95%A0-%EA%B8%B0%EB%B0%98-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4(RBAC)</link>
    <guid>https://quartz.jzhao.xyz/%EC%97%AD%ED%95%A0-%EA%B8%B0%EB%B0%98-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4(RBAC)</guid>
    <description>소프트웨어 시스템에서 **접근 제어(Access Control)**는 사용자가 특정 리소스나 기능에 접근할 수 있는 권한을 관리하는 핵심적인 보안 메커니즘입니다. 다양한 접근 제어 모델 중 **역할 기반 접근 제어(Role-Based Access Control, RBAC)**는 오늘날 가장 널리 사용되고 효과적인 모델 중 하나입니다.</description>
    <pubDate>Tue, 08 Jul 2025 01:55:59 GMT</pubDate>
  </item><item>
    <title>인증(Authentication)이란 무엇인가?</title>
    <link>https://quartz.jzhao.xyz/Authentication</link>
    <guid>https://quartz.jzhao.xyz/Authentication</guid>
    <description>인증은 간단해 보이지만, 그 이면에는 다양한 기술과 원칙이 숨어있습니다. 이 글을 통해 인증의 정확한 의미부터 최신 프로토콜, 그리고 Spring Security를 활용한 구현 방법까지 명확하게 이해하실 수 있을 것입니다. 인증(Authentication)이란 무엇일까요? **인증(Authentication)**은 시스템에 접근하려는 사용자가 **“자신이 주장하는 그 사람이 맞는지”**를 확인하는 절차입니다.</description>
    <pubDate>Tue, 08 Jul 2025 00:00:00 GMT</pubDate>
  </item>
    </channel>
  </rss>